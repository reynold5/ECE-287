----------------------------------------------------------------------------------------------------- 
--Conversion Entity, identifies inputsR sequence of input sequences and collects 5 bit inputsR equivalents 
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_unsigned.all;

entity sequencing is
	port ( clk : in std_logic;
	       origInputs : in std_logic_vector(3 downto 0);
                   numbits: out std_logic_vector(2 downto 0);
	       internalet: out std_logic_vector(4 downto 0));
end sequencing;

architecture cont of sequencing is
   --interal signals used to connect various entities, used throughout 
   type SM is (begin1, collect, noinput, done);
   signal state: SM; 
   --overall FSM
   signal SR:  std_logic_vector(4 downto 0);
   signal count:      std_logic_vector(2 downto 0);
   segcontrol: std_logic_vector(5 downtown 0);
   signal inputsR:  std_logic_vector(4 downto 0);
   --output signals used in display entity
   signal userinput: std_logic;
   signal beginsequence: std_logic;
	signal oneBit:std_logic_vector(2 downto 0);
	signal twoBit:std_logic_vector(2 downto 0);
	signal threeBit:std_logic_vector(2 downto 0);
	signal fourBit:std_logic_vector(2 downto 0);

  begin
  assign: process(clk)
  --Process for reading inputsR code from user input 
  begin 
  --Assigns states for later use
  --Intial input taken from user

if(clk'event and clk='1') then --Begin switch is pressed by user
       if    (origInputs(3)='1') then
          state <= begin1;   
	    elsif (origInputs(0)='1') then
	       state <= done;
	    elsif (origInputs(1)='1' or origInputs(2)='1') then
	       state <= collect;
	    else
	       state <= noinput; --No input from user
	    end if;
	  end if;
   --When begin button is pressed, shift register being to collect on SR
    if(clk'event and clk='1') then   
	    case state is
	         when begin1 => --Starts being cycle for shift register
	            inputsR <= "10101";
	            SR <= "00000"; --No inputs in shift register, starter state
			  	   count <= "000"; --No inputs in counter, stater state
			  	   userinput <= '0';  
			  	   beginsequence <= '1';     
            --Counter is implimented here to collect inputs from user
	         when collect =>
	            if(userinput = '0' and beginsequence = '1') then 
	               --If statement that collects inputs from dot and dash switches         
	               if       (origInputs = "0100") then
	                           SR    <=    (SR(3 downto 0) & '1');	--Dash is collected in SR
	                           count        <=    (count + 1); --ad 1 to counter
	               elsif   (origInputs = "0010") then
	                           SR    <=    (SR(3 downto 0) & '0');	--Dot is collected in SR
	                           count        <=    (count + 1); --add 1 to counter
	               else        SR(4 downto 0) <= SR(4 downto 0); --No change in SR
	                           count(2 downto 0) <= count(2 downto 0); --total count is stored
	               end if;
	               userinput <= '1';         
	            end if;  	
	         when noinput => --No input is received from the user, registers stop collecting
	             	     SR(4 downto 0) <= SR(4 downto 0); --No input received
	                    count(2 downto 0)         <= count(2 downto 0);
	                    inputsR                 <= "10101";
	                    userinput            <= '0';  
     
		--Inputs stored in 5 bit shift register, later converted to 7 segment display	
	         when done =>
                      --sequence ends when end switch is flipped
	            beginsequence <= '0';
	            case count is
                  --Input sequence for binary input is converted to 5 bit binary equivalent 
	               when "001" => --Binary equivalent for 1 term inputsR 
	                  case oneBit is
							when(SR = 0)=>
								inputsR <= "00000";--E		
	                  when (SR = 1)=>
								inputsR <= "10000";--T	
	                  end case;
	               when"010"=> --Binary equivalent for 2 term inputsR
							case twoBit is
	                  when  (SR = 0)=>
								inputsR <= "00000";
	                  when (SR = 1)=>
								inputsR <= "10000";--A		
 	                  when (SR = 2)=>
								inputsR <= "01000";--N	
 	                  when (SR = 3)=>
								inputsR <= "11000";--M		
	                  end case;
	               when "011" => --Binary equivalent for 3 term inputsR
	                 case threeBit is
						  when  (SR = 0)=>
								inputsR <= "00000";--S
	                  when (SR = 1); 
								inputsR <= "01101";--U		
	                  when (SR = 2)=>
								inputsR <= "01010";--R		
	                  when (SR = 3)=>
								inputsR <= "11000";--W		
	                  when (SR = 4)=>
								inputsR <= "10100";--D		
 	                  when (SR = 5)=>
								inputsR <= "00111";--K		
 	                  when (SR = 6)=>
								inputsR <= "10110";--G		
 	                  when (SR = 7)=>
								inputsR <= "10101";--O		
	                  end case;
	               when "100" => --Binary equivalent for 4 term inputsR
						case fourBit is
	                  when (SR = 0)=>
								inputsR <= "00000";--H 
	                  when (SR = 1)=>
								inputsR <= "10000";--V
							when (SR = 13)=>
								inputsR <= "11010";--Q	
  	                  when (SR = 4)=>
								inputsR <= "10100";--L			 
                     when (SR = 6)=>
								inputsR <= "11000";--P 	
  	                  when (SR = 7)=>
								inputsR <= "10101";--J	
	                  when (SR = 8)=>
						  		inputsR <= "01000";--B	
 	                  when (SR = 9)=>
								inputsR <= "10011";--X	
 	                  when (SR = 10)=>
								inputsR <= "01001";--C	
	                  when (SR = 11)=>
								inputsR <= "01101";--Y	
	                  when (SR = 12)=>
								inputsR <= "11000";--Z		
	                  when (SR = 2)=>
								inputsR <= "00100";--F	
	                  end case;
	               when others => inputsR <= "10101"; 
               end case;	           
	   end case;
   end if;--Display turns off	   
end process assign;
    numbits <= count;
	internalet <= inputsR;           
end cont;
--Bits need for display are send to display7
--inputsR 5 bits is sent to display7
